MATCH (n) RETURN DISTINCT n labeling as nodeType WITH nodeType AS type, COUNT(type) AS count ORDER BY count DESC LIMIT 1;
---
MATCH (n) RETURN DISTINCT n.relationshipType
---
MATCH (n:Node)
RETURN n.StartLabels, n.EndLabels, n.RelationshipType
---
MATCH (n:Node)
RETURN n.StartLabels, n.RelationshipType, n.EndLabels
---
MATCH p = (n1 {StartLabels: 'Person'})-[*]->(n2)
WHERE n2 StartsWith Label 'Tournament' OR n2 StartsWith Label 'Squad'
RETURN type(n1), type(n2)
---
MATCH (p:Person)-[:SCORED_GOAL]->(m:Match), (m)<-[:PLAYED_IN]-(:Squad) <-[:IN_SQUAD|-]-(s:Squad) <-[:FOR]-(:Tournament)
RETURN p.name AS Player, m.name AS Match
---
MATCH (t:Team)-[:PARTICIPATED_IN]->(m:Tournament)
RETURN t.name, m.name
---
MATCH (p:Person)-[r:SCORED_GOAL]->(m:Match)
WHERE r.count(m) >= 2
RETURN p
---
MATCH (t1:Team)-[:PARTICIPATED_IN]-(t2:Match)<-[:PLAYED_IN]-(t3:Person)
WHERE t1 <> t3
WITH t1, t2, COLLECT(DISTINCT t3) AS players
RETURN t1, collect(D distinct(t2)) as tournament
---
MATCH (t:Team)-[:NAMED]->(s:Squad), (s)<-[:FOR]-(m:Tournament)
WITH t, s, m
OPTIONAL MATCH (s)<-[:IN_SQUAD]-(p:Person)
RETURN DISTINCT t.name AS TeamName, p.name AS playerName
---
MATCH (t:Team)-[]-(r:Person)-[]-(tm:Team)
WHERE r.REPRESENTS = t
GROUP r BY tm
COUNT(t) AS count
RETURN tm, count
---
MATCH (t:Team)-[:REPRESENTS]->(p:Person)-[:SCORED_GOAL]->(m:Match)
RETURN t.name, AVG(COUNT(DISTINCT p.scoredGoal)) AS avgGoals
---
