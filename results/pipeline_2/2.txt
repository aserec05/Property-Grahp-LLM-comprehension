MATCH (n) RETURN DISTINCT TYPE(n)
---
MATCH (n) WHERE NOT n.type IN ["Person", "Squad", "Tournament", "Team"]
RETURN n.type
---
MATCH (n)
RETURN n.StartLabels, n.EndLabels
---
MATCH (n) RETURN n.StartLabels, n.EndLabels, n.RelationshipType
---
MATCH p=shortestPath((n:Person)-[*]-(m))
WHERE NOT (p.startNode = p.endNode)
RETURN n, m
---
MATCH (m:Match)-[:PLAYED_IN]->(p:Person)-[:SCORED_GOAL]->()
RETURN m, p
---
MATCH (t:Team)-[:PARTICIPATED_IN]->(tm:Tournament)
RETURN t.name, tm.name
---
MATCH (p:Person)-[:SCORED_GOAL]->(m:Match)
WITH p, COUNT(m) as scoreCount
WHERE scoreCount > 1
RETURN p
---
MATCH t1:Team, t2:Tournament
WHERE (t1)<-[:PARTICIPATED_IN]-(t) AND t2=t
WITH collect(t1) AS t1_teams, collect(t) AS t_tournaments
WHERE size(t1_teams) > 1 AND size(t_tournaments) == 1
RETURN t1_teams
---
MATCH (t:Team)-[:NAMED]->(s:Squad), (s)-[:FOR]->(m:Tournament)
WITH t, m
OPTIONAL MATCH (t)<-[]-(p:Person)-[:REPRESENTS]->(t2) OR <-[]-(p)-[:COACH_FOR]->(t2)
RETURN t.name AS TeamName, t2.name AS PlayerName
---
MATCH t:Team
OPTIONAL MATCH (t<-[:REPRESENTS]-(p:Person))
WITH t, COUNT(DISTINCT p) AS num_players
GROUP BY t
ORDER BY num_players DESC
---
MATCH (t:Team)-[:REPRESENTS]->(p:Person)-[r:SCORED_GOAL]-(:Match)
RETURN t.name, AVG(CASE WHEN r.EndLabels = 'Match' THEN p.SCORED_GOAL ELSE 0 END) AS average_goals
---
